--[[-------------------------------------------------------------------------------------------
File			: ui_edit_box.script
Description		: Ïîääåğæêà êèğèëëèöû â CUIEditBox äëÿ Ò×
Created			: 27.09.2015
Author			: naxac
--]]-------------------------------------------------------------------------------------------
local eng = [[qwertyuiop[]asdfghjkl;'zxcvbnm,./QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?!@#$%^&*()-_+=\| 0123456789]]
local rus = [[éöóêåíãøùçõúôûâàïğîëäæıÿ÷ñìèòüáş.ÉÖÓÊÅÍÃØÙÇÕÚÔÛÂÀÏĞÎËÄÆİß×ÑÌÈÒÜÁŞ,!"¹;%:?*()-_+=\/ 0123456789]]
local translit_tbl = {}
for i = 1, #rus do
	translit_tbl[eng:sub(i, i)] = rus:sub(i, i)
end

local function translit(s)
	return translit_tbl[s] or s
end

----------------------------------------------------------------------------------------
class "CUIEditBox_new" (CUIScriptWnd)

local box_textures = {
	default		= {tx = "ui_linetext_e", height = 24},
	default_d	= {tx = "ui_linetext_d", height = 24},
	pda			= {tx = "ui_icons_PDA_dialog_string", height = 22},
	small		= {tx = "ui_linetextSmall_e", height = 21},
	small_d		= {tx = "ui_linetextSmall_d", height = 21},
	spiner		= {tx = "ui_spiner", height = 21}
	}

function CUIEditBox_new:__init(stat, x, y, w, type) super()
--	if _G.set_input_language ~= nil then set_input_language(0) end
	self.last_text = ""
	self.mode = true	-- 'true' - russian, 'false' - english
	
	local t = box_textures["default"]
	if type and box_textures[type] then
		t = box_textures[type]
	end
	local texture = t.tx
	local h = t.height
	
	w = math.max((w or 0), 150)
	
	self.st = CUIStatic()
	self.st:Init(x, y, w, h)
	
	stat:AttachChild(self.st)
	
	self.edit_box = CUIEditBox()
	self.edit_box:SetAutoDelete(true)
	self.edit_box:Init(0,0,w-64,h)
	self.edit_box:InitTexture(texture)
	self.edit_box:SetFont(GetFontLetterica18Russian())
    self.st:AttachChild(self.edit_box)
	self:Register(self.edit_box, "ebox")
	self:AddCallback("ebox", ui_events.EDIT_TEXT_CHANGED, self.on_ChangeText, self)
	
	local btn_delText = CUIButton()
	btn_delText:Init("ui_hud_button_voting_01_e",w-63,0,25,h)
	btn_delText:SetStretchTexture(true)
	btn_delText:SetAutoDelete(true)
	btn_delText:SetText("X")
	btn_delText:SetFont(GetFontLetterica18Russian())
	self.st:AttachChild(btn_delText)
	self:Register(btn_delText, "button_clear")
	self:AddCallback("button_clear", ui_events.BUTTON_CLICKED, self.ClearBox, self)
	
	self.btn_lang = CUIButton()
	self.btn_lang:Init("ui_hud_button_voting_01_e",w-37,0,37,h)
	btn_delText:SetStretchTexture(true)
	self.btn_lang:SetAutoDelete(true)
	self.btn_lang:SetText("ĞÓÑ")
	self.btn_lang:SetTextColor(255,216,186,140)
	self.st:AttachChild(self.btn_lang)
	self:Register(self.btn_lang, "button_lang")
	self:AddCallback("button_lang", ui_events.BUTTON_CLICKED, self.on_ChangeLanguage, self)
end

function CUIEditBox_new:on_ChangeLanguage()
	self.mode = not self.mode
	self.btn_lang:SetText(self.mode and "ĞÓÑ" or "ENG")
end

function CUIEditBox_new:on_ChangeText()
	local text = self.edit_box:GetText()
	local len_l = #self.last_text
	local len_t = #text
	if self.mode and len_l<len_t then
		local s, l = "", ""
		local f = false
		for i=1,len_t do
			l = text:sub(i,i)
			if f==false and (len_l<i or l~=self.last_text:sub(i,i)) then
				f = true
				l = translit(l)
			end
			s = s..l
		end
		self.last_text = s
		self.edit_box:SetText(s)
	else
		self.last_text = text
	end
end

function CUIEditBox_new:ClearBox()
	self.last_text = ""
	self.edit_box:SetText("")
end

function CUIEditBox_new:SetText(str)
	self.last_text = tostring(str) or ""
	self.edit_box:SetText(self.last_text)
end

function CUIEditBox_new:GetText()
	return self.edit_box:GetText()
end

function CUIEditBox_new:SetTextColor(A,R,G,B)
	self.edit_box:SetTextColor(GetARGB(A,R,G,B))
end

local kAlt = {[DIK_keys.DIK_LMENU] = true, [DIK_keys.DIK_RMENU] = true}
local kShift = {[DIK_keys.DIK_LSHIFT] = true, [DIK_keys.DIK_RSHIFT] = true}
function CUIEditBox_new:OnKeyboard(dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if kAlt[dik] then self.alt_pressed = true
		elseif kShift[dik] then self.shift_pressed = true end
		
		if (self.shift_pressed and kAlt[dik]) or (self.alt_pressed and kShift[dik]) then
			self:on_ChangeLanguage()
		elseif self.shift_pressed and dik == DIK_keys.DIK_DELETE then
			self:ClearBox()
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if kAlt[dik] then self.alt_pressed = nil
		elseif kShift[dik] then self.shift_pressed = nil end
	end
end
