-- -*- mode: lua; encoding: windows-1251 -*-
-----------------------------------------------------------------------------------------
-- File			: collect_info_portions.script
-- Description	: Чтение инфопорций из конфигов
-- Created		: 28.09.2018
-- Last update	: 29.03.2020
-- Author		: naxac
-----------------------------------------------------------------------------------------
local mylog = function(fmt, ...)
	local msg = string.format(fmt, ...)
	if log1 then log1(msg)
	elseif log123 then log123(msg)
	elseif script_server_object_version() <= 6
		or alife() ~= nil
	then
		msg = string.gsub(msg, "%s", "_")
		get_console():execute(msg)
	end
end

function main( rewrite )
	if (ui_info_menu.list_info ~= nil) and not rewrite then
		return
	end

	local info_portions = {}
	local files = {}
	ui_info_menu.list_info = {}
	ui_info_menu.list_info.info_portions = info_portions
	ui_info_menu.list_info.files = files

	local str = sys_ini:r_string( "info_portions", "files" )
	for s in string.gmatch( str, "[^,^%s]+" ) do
		table.insert( files, s )
	end

	local fs = getFS()
	local ex = fs:exist( "$game_config$", "cheat_list_info.ltx" )
	if (ex == nil) or rewrite then
		if (ex == nil) and io then
			local f1 = fs:update_path("$game_config$", "system.ltx")
			local f2 = fs:update_path("$game_config$", "cheat_list_info.ltx")
			fs:file_copy(f1, f2)
		end

		local p
		for i, f in ipairs( files ) do
			p = "gameplay\\"..f..".xml"
			ex = fs:exist( "$game_config$", p )
			if not ex then
				info_portions[ f ] = "File not exist"
				mylog( "! %s: Error! File not found: [%s]", script_name(), p )
			elseif ex.modif == 0 then
				info_portions[ f ] = "File don't unpack"
				mylog( "! %s: folder 'config' hasn't full unpack! File not found: [%s]", script_name(), p )
			else
				mylog( "parse file %s", p )
				local file = fs:r_open("$game_config$", p)
				info_portions[ f ] = {}
				parse_file( file:r_stringZ(), info_portions[ f ] )
			end
		end

		if io then
			this.write_info(ui_info_menu.list_info)
		end
	else
		this.read_info(ui_info_menu.list_info)
	end

	local info_count = 0
	for k, v in pairs( info_portions ) do
		if type( v ) == "table" then
			info_count = info_count + #v
		end
	end
	ui_info_menu.list_info.info_count = info_count
end

function parse_file( str, tbl )
	-- удалим комментарии
	local n
	str, n = string.gsub( str, "<!%-%-.-%-%->", "" )
--	mylog( "delete %s comments", n )
	str, n = string.gsub( str, "%s*/>", "></info_portion>" )
--	mylog( "correct %d tags", n )

	for info, chck_str in string.gmatch( str, '<info_portion%s+id=(%b"")>(.-)</info_portion>' ) do
		local t = {}
		t.info = info:sub( 2, -2 )
	--	mylog( "found info: %s", t.info )
		if chck_str then
			-- ищем внутренние тэги (таски, артиклы и т.д.)
			for tag, sss, end_tag in string.gmatch( chck_str, "<([%w_]+)>([%w%.%-_]+)</([%w_]+)>" ) do
	--			mylog( "read tags [ %s : %s : %s ]", tag, sss, end_tag )
				if t[ tag ] == nil then
					t[ tag ] = {}
				end
				table.insert( t[ tag ], sss )
			end
		end
		table.insert( tbl, t )
	end
end

function write_info(tbl)
	mylog("[collect_info_portions] create ini_file")
	local path = getFS():update_path("$game_config$", "cheat_list_info.ltx")

	local function table_size(t)
		local n = 0
		for _ in pairs(t) do
			n = n + 1
		end
		return n
	end

	local tmp = {}
	local file = io.open(path,"w")
	for i, v in ipairs(tbl.files) do
		file:write("["..v.."]\n")
		if type(tbl.info_portions[v]) == "table" then
			for j, t in ipairs(tbl.info_portions[v]) do
				file:write(t.info.."\n")
				if table_size(t) > 1 then
					tmp[t.info] = {}
					for tag, names in pairs(t) do
						if tag ~= "info" then
							tmp[t.info][tag] = table.concat(names, ",")
						end
					end
				end
			end
		end
		file:write("\n")
	end
	file:write("\n;Tags info\n")

	for k, t in pairs(tmp) do
		file:write("["..k.."]\n")
		for s, v in pairs(t) do
			file:write(s.." = "..v.."\n")
		end
		file:write("\n")
	end
	file:close(file)
end

function read_info(tbl)
	mylog("[collect_info_portions] read ini_file")

	local ini = ini_file("cheat_list_info.ltx")
	local res, id, val, tag
	for i, file in ipairs(tbl.files) do
		if ini:section_exist(file) then
			tbl.info_portions[file] = {}
			for n = 0, ini:line_count(file)-1 do
				local t = {}
				res, id, val = ini:r_line(file, n, "", "")
				t.info = id
				if ini:section_exist(id) then
					for j = 0, ini:line_count(id)-1 do
						res, tag, val = ini:r_line(id, j, "", "")
						t[tag] = {}
						for s in string.gmatch( val, "[%w_%-%.]+" ) do
							table.insert(t[tag], s)
						end
					end
				end
				table.insert(tbl.info_portions[file], t)
			end
		else
			tbl.info_portions[file] = "File not scanned"
		end
	end
end

