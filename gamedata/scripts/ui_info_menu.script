-- -*- mode: lua; encoding: windows-1251 -*-
list_info = nil
local kScreen = math.min( (1024/768) / (device().width/device().height), 1 )
function table_copy( tbl, src )
	for k,v in pairs( src ) do
		if type( v ) == 'table' then
			tbl[ k ] = this.table_copy( {}, v )
		else
			tbl[ k ] = v
		end
	end
	return tbl
end

class "list_item" ( CUIListItemEx )

function list_item:__init()
	super()
	self:SetWndRect		( 0, 0, 200, 22 )
	
	self.st					= CUIStatic()
	self.st:SetAutoDelete	( true )
	self:AttachChild		( self.st )
	self.st:SetWndRect		( 1, 1, 190, 20 )
	self.st:SetFont			( GetFontLetterica18Russian() )
	self.st:SetTextColor	( 255,216,186,140 )
end
---------------------------------------------------------
class "list_item_b" ( CUIListItemEx )

function list_item_b:__init()
	super()
	self:SetWndRect		( 0, 0, 200, 22 )
	
	self.btn				= CUIStatic()
	self.btn:SetAutoDelete	( true )
	self:AttachChild		( self.btn )
	self.btn:SetWndRect		( 1, 1, 20*kScreen, 20 )
	self.btn:InitTexture	( "ui_radio_d" )
	self.btn:SetStretchTexture( true )
	

	self.st					= CUIStatic()
	self.st:SetAutoDelete	( true )
	self:AttachChild		( self.st )
	self.st:SetWndRect		( 24*kScreen, 1, 150, 22 )
	self.st:SetFont			( GetFontLetterica18Russian() )
	self.st:SetTextColor	( 255,216,186,140 )
end
---------------------------------------------------------

class "CUIInfoMenu" (CUIScriptWnd)

function CUIInfoMenu:__init()
	super()

	self.is_actor_alive = db.actor and db.actor:alive()
	
	collect_info_portions.main()
	self.info_portions = list_info.info_portions
	self.files = list_info.files
	self.info_count = list_info.info_count

	self.last_search = {}

	self:InitControls()
	self:InitCallBacks()
	self:FillFiles()
end

function CUIInfoMenu:__finalize()
end

function CUIInfoMenu:InitControls()
	self:Init(0,0,1024,768)

	local xml = CScriptXmlInit()
	xml:ParseFile( "ui_info_menu.xml" )

	xml:InitStatic( "background", self )

	xml:InitStatic( "cap_files", self )
	xml:InitFrame( "frame_files", self )
	self.list_files = xml:InitList( "list_files", self )
--	self.list_files:ShowSelectedItem( true )
	self:Register( self.list_files, "list_files" )

	xml:InitStatic( "cap_info", self )
	xml:InitFrame( "frame_info", self )
	self.list_info = xml:InitList( "list_info", self )
--	self.list_info:ShowSelectedItem( true )
	self:Register( self.list_info, "list_info" )

	local st = xml:InitStatic( "info_count", self )
	st:SetText( "total: "..self.info_count.." info portions" )

	xml:InitStatic( "cap_disable", self )
	xml:InitFrame( "frame_disable", self )
	self.list_disable = xml:InitList( "list_disable", self )
--	self.list_disable:ShowSelectedItem( true )
	self:Register( self.list_disable, "list_disable" )

	xml:InitStatic( "cap_task", self )
	xml:InitFrame( "frame_task", self )
	self.list_task = xml:InitList( "list_task", self )
--	self.list_task:ShowSelectedItem( true )
	self:Register( self.list_task, "list_task" )

	local scroll = xml:InitScrollView("task_descr:scroll_v", self)
	self.task_descr = xml:InitStatic("task_descr:list", scroll)

	xml:InitStatic( "cap_article", self )
	xml:InitFrame( "frame_article", self )
	self.list_article = xml:InitList( "list_article", self )
--	self.list_article:ShowSelectedItem( true )
	self:Register( self.list_article, "list_article" )

	xml:InitStatic( "cap_action", self )
	xml:InitFrame( "frame_action", self )
	self.list_action = xml:InitList( "list_action", self )
--	self.list_action:ShowSelectedItem( true )
	self:Register( self.list_action, "list_action" )

	self.search = xml:InitEditBox( "edit_search", self )
	self.search:SetText( "поиск" )

	local btn = xml:Init3tButton( "btn_give_info", self )
	self:Register( btn, "button_give" )
	btn:Enable( self.is_actor_alive )
	btn = xml:Init3tButton( "btn_disable_info", self )
	self:Register( btn, "button_disable" )
	btn:Enable( self.is_actor_alive )
	btn = xml:Init3tButton( "btn_quit", self )
	self:Register( btn, "button_quit" )

	self.message_box = CUIMessageBoxEx()
	self:Register( self.message_box, "message_box" )
end

function CUIInfoMenu:InitCallBacks()
	self:AddCallback( "list_files",    ui_events.LIST_ITEM_CLICKED,        self.OnListFilesClicked,     self )
	self:AddCallback( "list_info",     ui_events.LIST_ITEM_CLICKED,        self.OnListInfoClicked,      self )
	self:AddCallback( "button_quit",   ui_events.BUTTON_CLICKED,           self.OnButtonQuitClicked,    self )

	if not ( db.actor and db.actor:alive() ) then return end

	self:AddCallback( "list_disable",   ui_events.LIST_ITEM_CLICKED,       self.OnListDisableClicked,   self )
	self:AddCallback( "list_action",    ui_events.LIST_ITEM_CLICKED,       self.OnListActionClicked,    self )
	self:AddCallback( "list_task",      ui_events.LIST_ITEM_CLICKED,       self.OnListTaskClicked,      self )
	self:AddCallback( "list_article",   ui_events.LIST_ITEM_CLICKED,       self.OnListArticleClicked,   self )
	self:AddCallback( "button_give",    ui_events.BUTTON_CLICKED,          self.OnButtonGiveClicked,    self )
	self:AddCallback( "button_disable", ui_events.BUTTON_CLICKED,          self.OnButtonDisableClicked, self )
	self:AddCallback( "message_box",    ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes,               self )
	self:AddCallback( "message_box",    ui_events.MESSAGE_BOX_NO_CLICKED,  self.OnMsgNo,                self )
end

function CUIInfoMenu:FillFiles()
	local item
	for i, f in ipairs( self.files ) do
		item = list_item()
		local v = self.info_portions[ f ]
		if type( v ) == "table" then
			item.st:SetText( f )
		else
			item.st:SetText( f..": "..v )
		end
		self.list_files:AddItem( item )
	end
end

function CUIInfoMenu:FillInfo( file_name )
	local t = self.info_portions[ file_name ]
	if type( t ) ~= "table" then
		return
	end

	self.list_info:RemoveAll()
	self.list_disable:RemoveAll()
	self.list_task:RemoveAll()
	self.list_article:RemoveAll()
	self.list_action:RemoveAll()
	for i, v in ipairs( self.info_portions[ file_name ] ) do
		local item = list_item_b()
		item.st:SetText( v.info )
		if has_alife_info( v.info ) then
			item.btn:InitTexture( "ui_radio_h" )
		end
		self.list_info:AddItem( item )
	end
	self.list_info:ResetFocusCapture()
	self.list_info:ScrollToBegin()
	self.task_descr:SetText( "" )
	self.selected_info = nil
	self.info_index = nil
end

function CUIInfoMenu:FillTagList( tag_name, t )
	local list = self[ "list_"..tag_name ]
	if list == nil then return end

	local item_cls = ( tag_name == "disable" and "list_item_b" ) or "list_item"
	for i, v in ipairs( t ) do
		local itm = this[ item_cls ]()
		itm.st:SetText( v )
		if itm.btn then
			if has_alife_info( v ) then
				itm.btn:InitTexture( "ui_radio_h" )
			end
		end
		list:AddItem( itm )
	end
	list:ResetFocusCapture()
	list:ScrollToBegin()
end

function CUIInfoMenu:OnListFilesClicked()
	if self.list_files:GetSize() == 0 then return end

	local item_id = self.list_files:GetSelectedItem()
	if item_id == nil or item_id == -1 then return end
	self.list_files:SetFocusedItem( item_id )
	local item = self.list_files:GetItem( item_id )
	
	if item == nil then return end
	
	local file_name = item.st:GetText()
	if self.info_portions[ file_name ] then
		self.selected_file = file_name
		self:FillInfo( file_name )
	else
		self.selected_file = nil
		self.list_info:RemoveAll()
	end
end

function CUIInfoMenu:OnListInfoClicked( info )
	if self.list_info:GetSize() == 0 then return end
	if self.selected_file == nil then return end
	if self.info_portions[ self.selected_file ] == nil then return end

	local item_id = self.list_info:GetSelectedItem()
	if item_id == nil or item_id == -1 then return end
	self.list_info:SetFocusedItem( item_id )
	local item = self.list_info:GetItem( item_id )
	
	if item == nil then return end
	
	local info_id = item.st:GetText()
	self.selected_info = info_id
	self.info_index = item_id
	local t = {}
	for i, v in ipairs( self.info_portions[ self.selected_file ] ) do
		if v.info == info_id then
			table_copy( t, v )
			t.info = nil
			break
		end
	end
	self.list_disable:RemoveAll()
	self.list_task:RemoveAll()
	self.list_article:RemoveAll()
	self.list_action:RemoveAll()
	self.task_descr:SetText( "" )
	for k, v in pairs( t ) do
		self:FillTagList( k, v )
	end
end

function CUIInfoMenu:OnListDisableClicked()
end

function CUIInfoMenu:OnListActionClicked()
	if self.list_action:GetSize() == 0 then return end

	local item_id = self.list_action:GetSelectedItem()
	if item_id == nil or item_id == -1 then return end

	self.list_action:SetFocusedItem( item_id )
	local item = self.list_action:GetItem( item_id )

	if item == nil then return end

	self.func = item.st:GetText()
	
	self.message_box:Init( "message_box_change_level" )
	self.message_box:SetText( "Будет выполнена Lua-функция "..self.func..".\\nПродолжить?" )
	self:GetHolder():start_stop_menu( self.message_box, true )
end

function CUIInfoMenu:OnMsgYes()
	if self.func then
		local res, err = pcall( loadstring( self.func.."()" ) )
		log( res and "- Successfully!" or "! Error: "..err )
		self.func = nil
	end
end

function CUIInfoMenu:OnMsgNo()
	self.func = nil
end

local status2text = {
	[task.task_dummy]  = "%c[255,160,160,160]неактивно",
	[task.in_progress] = "%c[255,255,255,0]активно",
	[task.completed]   = "%c[255,0,255,0]выполнено",
	[task.fail]        = "%c[255,255,0,0]провалено"
}
function CUIInfoMenu:OnListTaskClicked()
	if self.list_task:GetSize() == 0 then return end

	local item_id = self.list_task:GetSelectedItem()
	if item_id == nil or item_id == -1 then return end
	self.list_task:SetFocusedItem( item_id )
	local item = self.list_task:GetItem( item_id )
	
	if item == nil then return end
	
	local task_id = item.st:GetText()

	local translate = game.translate_string

	local t = CGameTask()
	t:load( task_id )

	local st = db.actor:get_task_state(task_id, 0)
	local text = translate( t:get_title() )..
			" - "..status2text[st].."%c[default] \\n"..
			"Подзадания:\\n"

	for i = 1, t:get_objectives_cnt() - 1 do
		st = db.actor:get_task_state(task_id, i)
		text = text.."   "..
			translate( t:get_objective( i ):get_description() )..
			" - "..status2text[st].."%c[default] \\n"
	end
	self.task_descr:SetText( text )
end

function CUIInfoMenu:OnListArticleClicked()
end

function CUIInfoMenu:SearchInfo()
	local text = self.search:GetText()
	if text == "" then return end

	local br, file_index, info_index
	local tmp = {}
	for i, v in ipairs( self.files ) do
		if type( self.info_portions[ v ] ) == "table" then
			for j, t in ipairs( self.info_portions[ v ] ) do
				if string.find( t.info, text ) and not self.last_search[ t.info ] then
					self.last_search[ t.info ] = true
					file_index = i
					info_index = j
					table_copy( tmp, t )
					tmp.info = nil
					br = true
					break
				end
			end
		end
		if br then break end
	end

	if not file_index then
		self.last_search = {}
		return
	end

	local item_id = file_index - 1
	local itm = self.list_files:GetItem( item_id )
	if itm == nil then return end
	self.list_files:ScrollToPos( item_id )
	local file_name = itm.st:GetText()
	if self.selected_file ~= file_name then
		self.list_files:SetFocusedItem( item_id )
		self.selected_file = file_name
		self:FillInfo( file_name )
	end

	item_id = info_index - 1
	itm = self.list_info:GetItem( item_id )
	if itm == nil then return end
	self.list_info:ScrollToPos( item_id )
	local info = itm.st:GetText()
	if self.selected_info ~= info then
		self.selected_info = info
		self.list_info:SetFocusedItem( item_id )
		self.info_index = item_id

		self.list_disable:RemoveAll()
		self.list_task:RemoveAll()
		self.list_article:RemoveAll()
		self.list_action:RemoveAll()
		self.task_descr:SetText( "" )
		for k, v in pairs( tmp ) do
			self:FillTagList( k, v )
		end
	end
end

function CUIInfoMenu:OnButtonGiveClicked()
	if self.selected_info and not has_alife_info( self.selected_info ) then
		db.actor:give_info_portion( self.selected_info )
		local item = self.list_info:GetItem( self.info_index )
		if item then
			item.btn:InitTexture( "ui_radio_h" )
		end
		self.selected_info = nil
		self.info_index = nil
	end
end

function CUIInfoMenu:OnButtonDisableClicked()
	if self.selected_info and has_alife_info( self.selected_info ) then
		db.actor:disable_info_portion( self.selected_info )
		local item = self.list_info:GetItem( self.info_index )
		if item then
			item.btn:InitTexture( "ui_radio_d" )
		end
		self.selected_info = nil
		self.info_index = nil
	end
end

function CUIInfoMenu:OnButtonQuitClicked()
	self:GetHolder():start_stop_menu( self.owner.spawn_menu, true )
	self:GetHolder():start_stop_menu( self, true )
end


function CUIInfoMenu:OnKeyboard( dik, keyboard_action )
	CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnButtonQuitClicked()
		elseif dik == DIK_keys.DIK_RETURN then
			self:SearchInfo()
		end
	end

	return true
end


