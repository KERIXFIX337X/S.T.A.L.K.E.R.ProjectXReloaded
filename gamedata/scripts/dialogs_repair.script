--------------------------------------------------------------------------------------------------------
-- Common Repair
-- author: shebuka
-- improved to common version: XiaNi
--------------------------------------------------------------------------------------------------------

-- default values -- if everything ok - this values would not be used
local weapon_profit_markup = 1
local armor_profit_markup = 1

local default_vendor_name = "default_vendor"
local default_vendor_disp = 0.5 -- this is +/- for 'default_vendor' markups

local this_vendor_know_how_to_fix = false

local markups_by_vendor = {
	bar_barman = {1.6, 1.5}, -- Barman
	escape_trader = {1.3, 1.2}, -- Sidr
	yantar_ecolog_general = {1.8, 1.7}, -- Sakharov
	mil_freedom_member0021 = {2.0, 1.9}, -- Screw
	esc_blokpost_commander = {1.3, 1.2}, -- Escape Blockpost Commander
	val_bandit_trader = {1.8, 1.7},
	pri_monolith_trader = {2.0, 1.9}, -- Monolith trader
	mil_ara = {2.0, 1.9}, -- Ara
	
	default_vendor = {3, 3.2} -- all others
}

-- common init ... may be this way can be task_manager modified
--[[
this function starts every time diaglog is initializes..
so here we will setup markups for current vendor
and also predefine vendors ability to repair
]]
function init_dialog(actor, trader)
	setup_markups_by_vendor(trader)
	this_vendor_know_how_to_fix = get_vendor_knowledge(trader, actor)
	xiani.xlog("trader know = " .. tostring(this_vendor_know_how_to_fix))
end

function setup_markups_by_vendor(vendor)
	local markups = nil
	markups = markups_by_vendor[vendor:name()]
	if markups ~= nil then
		weapon_profit_markup = markups[1]
		armor_profit_markup = markups[2]
	else
		-- in case vendor have no own markups - use common
		markups = markups_by_vendor[default_vendor_name]
		-- xiani.xlog("using default markups [" .. tostring(markups[1]) .. "] [" .. tostring(markups[2]) .. "]")
		
		-- add some random dispersion to markups
		-- we will base randomness on vendor id to make each NPC have it's own markup (in ideal)
		math.randomseed(vendor:id())
		local disp = 0
		disp = (math.random((default_vendor_disp*2)*10)/10) - default_vendor_disp
		weapon_profit_markup = markups[1] + disp
		disp = (math.random((default_vendor_disp*2)*10)/10) - default_vendor_disp
		armor_profit_markup = markups[2] + disp
		
		-- xiani.xlog("randomed markups [" .. tostring(weapon_profit_markup) .. "] [" .. tostring(armor_profit_markup) .. "]")
	end
end

function npc_can_repair_precond(trader, actor)
	return this_vendor_know_how_to_fix
end

function npc_cant_repair_precond(trader, actor)
	return not npc_can_repair_precond(trader, actor)
end

function get_vendor_knowledge(trader, actor)
	xiani.xlog("trader is " .. tostring(trader:name()) .. "[" .. tostring(trader:id()) .. "]")
	local markups = markups_by_vendor[trader:name()]
	if markups ~= nil then
		-- all "registered" here vendors CAN repair
		 xiani.xlog("vendor registered")
		return true
	else
		-- unknown vendors should be checked by random 1 from 4 can do that ... later we should better check his rank too
		 xiani.xlog("get vendor rank")
		local vendor_rank
		local tmod = 4
		if trader.m_story_id ~= nil then
			vendor_rank = trader:rank()
		else
			vendor_rank = trader:character_rank()
		end
		
		 xiani.xlog("vendor rank is " .. tostring(vendor_rank))
		if vendor_rank > 800 then
			return true
		elseif vendor_rank > 400 then
			tmod = 40
		else
			tmod = 20
		end
		
		math.randomseed(trader:id())
		local t1 = math.random(1,100)
		xiani.xlog("vendor unregistered t1=" .. tostring(t1) .. " tmod=" .. tostring(tmod))
		return (t1 >= tmod)
	end
end

function trader_repair_precond(trader, actor)
	local item_in_slot_1 = db.actor:item_in_slot(1)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	local item_in_slot_6 = db.actor:item_in_slot(6)
	if item_in_slot_1 ~= nil and 1 > item_in_slot_1:condition() + 0.01 then return true
	elseif item_in_slot_2 ~= nil and 1 > item_in_slot_2:condition() + 0.01 then return true
	elseif item_in_slot_6 ~= nil and 1 > item_in_slot_6:condition() + 0.01 then return true
	else return false
	end	 
end

function trader_check_money_s1(trader, actor)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_markup )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_check_money_s2(trader, actor)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_markup )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_check_money_s6(trader, actor)
	local item_in_slot = db.actor:item_in_slot(6)
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_markup )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_repiar_weapon_s1(trader, actor)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_markup )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end
end

function trader_repiar_weapon_s2(trader, actor)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_markup )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end
end

function trader_repiar_armor_s6(trader, actor)
	local item_in_slot = db.actor:item_in_slot(6)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_markup )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end	
end

function repair_costs(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	
	local item_name_and_price = ""
	local item_repair_cost = 0
	if db.actor ~= nil then 
		local item_in_slot_1 = db.actor:item_in_slot(1)
		local item_in_slot_2 = db.actor:item_in_slot(2)
		local item_in_slot_6 = db.actor:item_in_slot(6)
	
		if item_in_slot_1 ~= nil then 
			item_repair_cost = math.floor( (1-item_in_slot_1:condition()) * item_in_slot_1:cost() * weapon_profit_markup )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_0").." %c[255,238,155,23]"..item_repair_cost.."Ru%c[default]"
				db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_2 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_2:condition()) * item_in_slot_2:cost() * weapon_profit_markup )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_1").." %c[255,238,155,23]"..item_repair_cost.."Ru%c[default]"
				db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_6 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_6:condition()) * item_in_slot_6:cost() * armor_profit_markup )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_2").." %c[255,238,155,23]"..item_repair_cost.."Ru%c[default]"
				db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
	end
end
